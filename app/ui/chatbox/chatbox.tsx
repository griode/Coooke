/* eslint-disable @next/next/no-img-element */
"use client";

import React, { useState, useRef } from "react";
import { HiMiniArrowUp, HiOutlinePhoto } from "react-icons/hi2";
import pickImage from "@/app/data/functions/image_picker";
import { IconButton, OutlineButton } from "../components/button";
import { ClosePanelButton } from "../components/interactive_panel_props";
import CircularProgress from "../components/circular_progress";
import { generateRecipeByPrompt } from "@/app/data/functions/cook_ia";
import Recipe from "@/app/data/model/recipe_model";
import RecipeCard from "../components/recipe_card";

// Define the structure of a single chat entry
type RecipeGeneratorProps = {
  contentType: "text" | "image" | "recipes"; // Possible content types
  content: string; // The actual content (text or image URL)
  recipes: Recipe[];
  author: "user" | "bot"; // The sender of the content
};

// Component to render individual chat entries
const RequestContent: React.FC<{ content: RecipeGeneratorProps }> = ({
  content,
}) => {
  const { contentType, content: contentData, recipes, author } = content;
  let view = <></>

  if (contentType === "text") {
    view = (
      <div className="p-2 text-sm rounded-lg">
        {contentData}
      </div>
    );
  } else if (contentType === "image") {
    view = (
      <div className="h-36 rounded-xl overflow-hidden">
        <img
          src={contentData}
          alt="Image generated by the AI"
          className="w-full h-full object-cover"
        />
      </div>
    );
  } else if (contentType === "recipes") {
    view = (
      <div className="">
        {
          recipes.map((recipe, index) => <RecipeCard key={index} recipe={recipe} />)
        }
      </div>
    )
  }

  return (
    <div className={`flex ${author === "user" ? "justify-end " : "justify-start"
      }`}>
      <div
        className={`rounded-xl overflow-hidden ${author === "user" ? "bg-slate-800 text-white ml-4" : "mr-4 bg-slate-100"
          } `}
      >
        {view}
      </div>
    </div>
  );
};

// Main Recipe Generator Component
const ChatBox: React.FC = () => {
  const [chatData, setChatData] = useState<RecipeGeneratorProps[]>([]); // Chat history
  const descriptionRef = useRef<HTMLTextAreaElement>(null); // Reference to the input field
  const [loadingTraitement, setLoadingTraitement] = useState(false);

  // Add a new chat entry
  const handleSendRequest = (request: RecipeGeneratorProps) => {
    setChatData((prevState) => [...prevState, request]);
  };

  // Handle image upload
  const handlePickImage = async () => {
    const image = await pickImage(); // Custom hook to pick an image

    if (image) {
      handleSendRequest({
        contentType: "image",
        content: image,
        recipes: [],
        author: "user",
      });
    }
  };

  // Handle sending a text description
  const handleSendDescription = async () => {
    const description = descriptionRef.current?.value.trim(); // Get input value
    if (description) {
      handleSendRequest({
        contentType: "text",
        recipes: [],
        content: description,
        author: "user",
      });
      if (descriptionRef.current) {
        descriptionRef.current.value = ""; // Clear input field
      }

      setLoadingTraitement(true);

      // Call the traitement API
      const recipes = await generateRecipeByPrompt(description);
      setLoadingTraitement(false);
      if (recipes.length > 0) {
        handleSendRequest({
          contentType: "recipes",
          recipes: recipes,
          content: description,
          author: "bot",
        });
      } else {
        handleSendRequest({
          contentType: "text",
          recipes: [],
          content: "Sorry, I couldn't find any recipe for this description.",
          author: "bot",
        });
      }
    }
  };

  return (
    <div className="space-y-2 w-full flex flex-col items-center justify-between h-full">
      {/* Header */}
      <header className="w-full">
        <div className="flex items-center p-2 space-x-4">
          <ClosePanelButton panelId="chatPanel" />
          <h1 className="text-xs">üç≥ Need a recipe, ingredients, or tips? Let‚Äôs cook! üòä</h1>
          <OutlineButton onClick={() => setChatData([])}>Clear</OutlineButton>
        </div>

        <hr />
      </header>

      {/* Chat History */}
      <div className="h-full w-full overflow-y-scroll p-4 space-y-4">
        {chatData.map((request, index) => (
          <RequestContent key={index} content={request} />
        ))}
        {loadingTraitement && (<div className="flex space-x-2 items-center">
          <CircularProgress infinite={true} size={16} />
          <p>analyse... </p> </div>)}
      </div>

      {/* Footer */}
      <footer className="px-4 pb-4 w-full">
        <div className="border rounded-2xl w-full">
          {/* Input field */}
          <textarea
            ref={descriptionRef}
            defaultValue={"Qu'est-ce-que je peux pr√©parer avec du couscouse et de la viande de porc"}
            className="w-full h-16 p-3 outline-none bg-transparent resize-none"
            placeholder="Write recipe name or description"
            aria-label="Recipe description"
          ></textarea>
          {/* Action buttons */}
          <div className="flex justify-between px-3 pb-3">
            <IconButton onClick={handlePickImage} aria-label="Upload image">
              <HiOutlinePhoto className="text-xl" />
            </IconButton>
            <IconButton
              onClick={handleSendDescription}
              aria-label="Send description"
            >
              <HiMiniArrowUp className="text-xl" />
            </IconButton>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default ChatBox;
