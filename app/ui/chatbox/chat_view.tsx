/* eslint-disable @next/next/no-img-element */
import Recipe from "@/app/data/model/recipe_model";
import RecipeCard from "../components/recipe_card";
import { useEffect } from "react";
import { RecipeProvider } from "@/app/data/provider/recipe_provider";
import { auth } from "@/app/firebase";

// Define the structure of a single chat entry
export type RecipeGeneratorProps = {
    contentType: "text" | "image" | "recipes"; // Possible content types
    content: string; // The actual content (text or image URL)
    recipes: Recipe[];
    author: "user" | "bot"; // The sender of the content
};

// Component to render individual chat entries
export const RequestContent: React.FC<{ content: RecipeGeneratorProps }> = ({
    content,
}) => {
    const { contentType, content: contentData, recipes, author } = content;
    let view = <></>

    function saveRecipe() {
        const user = auth.currentUser;
        if (user) {
            if (contentType === "recipes" && recipes.length > 0 && author === "bot") {
                for (const recipe of recipes) {
                    recipe.createdBy = user.uid;
                    RecipeProvider.saveRecipe(recipe);
                }
            }
        }
    }

    useEffect(() => {
        saveRecipe();
    }, []);

    if (contentType === "text") {
        view = (
            <div className="p-2 text-sm rounded-lg">
                {contentData}
            </div>
        );
    } else if (contentType === "image") {
        view = (
            <div className="rounded-xl overflow-hidden">
                <img
                    src={contentData}
                    alt="Image generated by the AI"
                    className="w-full h-full object-cover"
                />
            </div>
        );
    } else if (contentType === "recipes") {
        view = (
            <div className=" space-y-2 bg-white">
                {
                    recipes.map((recipe, index) => <RecipeCard key={index} recipe={recipe} />)
                }
            </div>
        )
    }

    return (
        <div className={`flex ${author === "user" ? "justify-end " : "justify-start"
            }`}>
            <div
                className={`w-4/5 rounded-xl overflow-hidden ${author === "user" ? "bg-slate-800 text-white" : " bg-slate-100"
                    } `}
            >
                {view}
            </div>
        </div>
    );
}